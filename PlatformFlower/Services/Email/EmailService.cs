using System.Net;
using System.Net.Mail;

namespace PlatformFlower.Services.Email
{
    public class EmailService : IEmailService
    {
        private readonly IEmailConfiguration _emailConfig;
        private readonly ILogger<EmailService> _logger;

        public EmailService(IEmailConfiguration emailConfig, ILogger<EmailService> logger)
        {
            _emailConfig = emailConfig;
            _logger = logger;
        }

        public async Task SendWelcomeEmailAsync(string toEmail, string username)
        {
            try
            {
                var subject = "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi PlatformFlower!";
                var body = GenerateWelcomeEmailBody(username);

                await SendEmailAsync(toEmail, subject, body);
                _logger.LogInformation($"Welcome email sent successfully to {toEmail}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"Failed to send welcome email to {toEmail}: {ex.Message}", ex);
                throw;
            }
        }

        public async Task SendPasswordResetEmailAsync(string toEmail, string resetToken, string username)
        {
            try
            {
                var subject = "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - PlatformFlower";
                var body = GeneratePasswordResetEmailBody(resetToken, username);

                await SendEmailAsync(toEmail, subject, body);
                _logger.LogInformation($"Password reset email sent successfully to {toEmail}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"Failed to send password reset email to {toEmail}: {ex.Message}", ex);
                throw;
            }
        }

        public async Task SendEmailAsync(string toEmail, string subject, string body)
        {
            try
            {
                _logger.LogInformation($"Attempting to send email to {toEmail} with subject: {subject}");

                using var smtpClient = new SmtpClient(_emailConfig.SmtpServer, _emailConfig.Port);
                smtpClient.EnableSsl = true;
                smtpClient.UseDefaultCredentials = false;
                smtpClient.Credentials = new NetworkCredential(_emailConfig.SenderEmail, _emailConfig.SenderPassword);

                using var mailMessage = new MailMessage();
                mailMessage.From = new MailAddress(_emailConfig.SenderEmail, "PlatformFlower");
                mailMessage.To.Add(toEmail);
                mailMessage.Subject = subject;
                mailMessage.Body = body;
                mailMessage.IsBodyHtml = true;

                await smtpClient.SendMailAsync(mailMessage);
                _logger.LogInformation($"Email sent successfully to {toEmail}");
            }
            catch (Exception ex)
            {
                _logger.LogError($"Failed to send email to {toEmail}: {ex.Message}", ex);
                throw;
            }
        }

        private string GenerateWelcomeEmailBody(string username)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background-color: #4CAF50; color: white; padding: 20px; text-align: center; }}
        .content {{ padding: 20px; background-color: #f9f9f9; }}
        .footer {{ padding: 20px; text-align: center; color: #666; }}
        .button {{ display: inline-block; padding: 10px 20px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 5px; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üå∏ Ch√†o m·ª´ng ƒë·∫øn v·ªõi PlatformFlower! üå∏</h1>
        </div>
        <div class='content'>
            <h2>Xin ch√†o {username}!</h2>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>PlatformFlower</strong> - n·ªÅn t·∫£ng mua b√°n hoa tr·ª±c tuy·∫øn h√†ng ƒë·∫ßu!</p>

            <p>T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:</p>
            <ul>
                <li>üõí Mua s·∫Øm c√°c lo·∫°i hoa t∆∞∆°i ƒë·∫πp</li>
                <li>üå∫ Kh√°m ph√° b·ªô s∆∞u t·∫≠p hoa ƒëa d·∫°ng</li>
                <li>üíù T·∫∑ng hoa cho ng∆∞·ªùi th√¢n y√™u</li>
                <li>‚≠ê T√≠ch ƒëi·ªÉm v√† nh·∫≠n ∆∞u ƒë√£i ƒë·∫∑c bi·ªát</li>
            </ul>

            <p>Ch√∫ng t√¥i r·∫•t vui m·ª´ng ƒë∆∞·ª£c ph·ª•c v·ª• b·∫°n!</p>

            <p style='text-align: center; margin: 30px 0;'>
                <a href='#' class='button'>B·∫Øt ƒë·∫ßu mua s·∫Øm ngay!</a>
            </p>
        </div>
        <div class='footer'>
            <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© PlatformFlower</strong></p>
            <p><small>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</small></p>
        </div>
    </div>
</body>
</html>";
        }

        private string GeneratePasswordResetEmailBody(string resetToken, string username)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background-color: #FF6B6B; color: white; padding: 20px; text-align: center; }}
        .content {{ padding: 20px; background-color: #f9f9f9; }}
        .footer {{ padding: 20px; text-align: center; color: #666; }}
        .token-box {{ background-color: #fff; border: 2px dashed #FF6B6B; padding: 15px; margin: 20px 0; text-align: center; font-family: monospace; font-size: 18px; font-weight: bold; color: #FF6B6B; }}
        .warning {{ background-color: #FFF3CD; border: 1px solid #FFEAA7; padding: 10px; margin: 15px 0; border-radius: 5px; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - PlatformFlower</h1>
        </div>
        <div class='content'>
            <h2>Xin ch√†o {username}!</h2>
            <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n t·∫°i <strong>PlatformFlower</strong>.</p>

            <p>ƒê·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng s·ª≠ d·ª•ng m√£ x√°c th·ª±c d∆∞·ªõi ƒë√¢y:</p>

            <div class='token-box'>
                {resetToken}
            </div>

            <div class='warning'>
                <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>
                <ul>
                    <li>M√£ x√°c th·ª±c n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong <strong>15 ph√∫t</strong></li>
                    <li>Ch·ªâ s·ª≠ d·ª•ng m√£ n√†y n·∫øu b·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</li>
                    <li>Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</li>
                </ul>
            </div>

            <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y. T√†i kho·∫£n c·ªßa b·∫°n v·∫´n an to√†n.</p>
        </div>
        <div class='footer'>
            <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© PlatformFlower</strong></p>
            <p><small>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</small></p>
        </div>
    </div>
</body>
</html>";
        }
    }
}
